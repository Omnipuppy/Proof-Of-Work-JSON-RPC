const { PeerServer } = require('peer');
const axios = require('axios');
const { jsonRpc } = require('jsonrpc-lite');

const endpoint = 'http://localhost:3000';

class ProofOfWorkP2P {
  constructor() {
    this.peers = [];
    this.server = new PeerServer({
      port: 9000,
      path: '/p2p'
    });
    this.server.on('connection', this.handleConnection.bind(this));
  }

  async handleConnection(conn) {
    console.log('New peer connected:', conn.peer);
    this.peers.push(conn.peer);
    conn.on('data', async data => {
      console.log('Received data:', data);
      try {
        const result = await this.sendProofOfWork(data, 3);
        console.log('Proof of work hash:', result);
        this.broadcast(result);
      } catch (err) {
        console.error(err.message);
      }
    });
  }

  async sendProofOfWork(data, difficulty) {
    const payload = { data, difficulty };
    const request = jsonRpc.request(1, 'proof-of-work', payload);
    const response = await axios.post(endpoint, request);

    const parsedResponse = jsonRpc.parseObject(response.data);
    if (parsedResponse.type === 'success') {
      return parsedResponse.payload.result;
    } else {
      throw new Error(parsedResponse.payload.message);
    }
  }

  broadcast(data) {
    this.peers.forEach(peer => {
      this.server.emit(peer, data);
    });
  }
}

module.exports = ProofOfWorkP2P;
